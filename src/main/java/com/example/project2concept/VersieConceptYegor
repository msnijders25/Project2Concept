import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.control.SplitPane;
import javafx.stage.Stage;

public class HelloApplication extends Application {
    private VBox chats;
    private VBox chatContainer;
    private TextArea chatTextArea;
    private TextArea inputText;


    @Override
    public void start(Stage primaryStage) throws Exception {
        BorderPane root = new BorderPane();

        chats = new VBox();
        chats.setPrefWidth(200);
        chats.setSpacing(10);

        // Wrap the chats VBox in a ScrollPane
        ScrollPane chatsScrollPane = new ScrollPane(chats);
        chatsScrollPane.setFitToWidth(true);

        chatContainer = new VBox();
        chatContainer.setSpacing(10);

        HBox inputContainer = new HBox();
        inputContainer.setSpacing(5);

        chatTextArea = new TextArea();
        chatTextArea.setPrefSize(600, 530);

        inputText = new TextArea();
        inputText.setPrefSize(600, 50);
        inputText.setPromptText("Type een bericht...");

        inputText.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                if (event.getCode() == KeyCode.ENTER && !event.isShiftDown()) {
                    event.consume(); // Prevents a new line from being added to the text area
                    String message = inputText.getText().trim(); // Get the entered message
                    if (!message.isEmpty()) {
                        // Process the entered message (e.g., send it, display it in the chat, etc.)
                        chatTextArea.appendText("You: " + message + "\n");
                        inputText.clear(); // Clear the input area after sending the message
                    }
                }
            }
        });

        inputContainer.getChildren().addAll(inputText);
        chatContainer.getChildren().addAll(chatTextArea, inputContainer);

        VBox leftPane = new VBox();
        chats.setPrefHeight(535);

        ComboBox<String> optionsComboBox = new ComboBox<>();
        optionsComboBox.setPrefWidth(120);
        optionsComboBox.setItems(getOptionsList());
        optionsComboBox.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String selectedOption = optionsComboBox.getValue();
                if (selectedOption.equals("Log Out")) {
                    // Perform log out actions here
                    primaryStage.close(); // Close the application after logging out
                } else if (selectedOption.equals("Clear Conversations")) {
                    clearConversations();
                } else if (selectedOption.equals("Settings")) {
                    // Open settings window or perform settings-related actions
                }
                optionsComboBox.getSelectionModel().clearSelection();
            }
        });

        HBox logoutContainer = new HBox(optionsComboBox);
        logoutContainer.setStyle("-fx-alignment: bottom-center; -fx-padding: 0 30 0 0;");

        leftPane.getChildren().addAll(chatsScrollPane, logoutContainer);

        SplitPane splitPane = new SplitPane(leftPane, chatContainer);
        splitPane.setDividerPositions(0.2); // Set the initial divider position

        root.setCenter(splitPane);

        Button newChatButton = new Button("New Chat");
        newChatButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                createNewChat();
            }
        });

        HBox buttonContainer = new HBox(newChatButton);
        buttonContainer.setSpacing(5);

        root.setTop(buttonContainer);

        Scene scene = new Scene(root, 800, 600);
        primaryStage.setTitle("Chat42");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void createNewChat() {
        String chatName = "New Chat"; // Default chat name
        addChatItem(chatName);
    }

    private void addChatItem(String chatName) {
        TextArea item = new TextArea(chatName);
        item.setPrefHeight(20);
        item.setStyle("-fx-control-inner-background: #333333;");
        item.setEditable(false); // Set the chat name TextArea uneditable

        // Mini button for editing chat name
        Button editButton = new Button("Edit");
        editButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                openEditWindow(item);
            }
        });

        HBox chatItemContainer = new HBox(item, editButton);
        chatItemContainer.setSpacing(5);

        item.setOnMouseClicked(event -> {
            chatTextArea.clear();
            chatTextArea.appendText("Clicked on: " + item.getText() + "\n");
        });
        chats.getChildren().add(chatItemContainer);
    }

    private void openEditWindow(TextArea chatNameTextArea) {
        Stage editStage = new Stage();
        BorderPane editRoot = new BorderPane();
        TextArea editTextArea = new TextArea(chatNameTextArea.getText());
        Button saveButton = new Button("Save");

        saveButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String updatedName = editTextArea.getText();
                chatNameTextArea.setText(updatedName);
                editStage.close();
            }
        });

        editRoot.setCenter(editTextArea);
        editRoot.setBottom(saveButton);
        Scene editScene = new Scene(editRoot, 300, 200);
        editStage.setScene(editScene);
        editStage.setTitle("Edit Chat Name");
        editStage.show();
    }

    private ObservableList<String> getOptionsList() {
        ObservableList<String> optionsList = FXCollections.observableArrayList();
        optionsList.addAll("Clear Conversations", "Settings", "Log Out");
        return optionsList;
    }

    private void clearConversations() {
        chats.getChildren().clear();
        chatTextArea.clear();
    }

    public static void main(String args[]) {
        launch(args);
    }
}
